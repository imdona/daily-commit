'''
백준 10808 [알파벳 개수]
알파벳 소문자로만 이루어진 단어 S가 주어진다. 각 알파벳이 단어에 몇 개가 포함되어 있는지 구하는 프로그램을 작성하시오.
[입력]
첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.
[출력]
단어에 포함되어 있는 a의 개수, b의 개수, …, z의 개수를 공백으로 구분해서 출력한다.
'''

## 첫번째 방법
S = input() # 문자열 받기

# 알파벳 개수인 26개만큼 0으로 이루어진 list 만들기
result_list = [0] * 26
# result_list = [0 for i in range(26)] : 다양한 방법 있음!

# 문자열을 for반복문으로 돌면서 아스키코드를 이용하여 차이 구하기
# 차이 = 위에서 만든 알파벳 리스트의 인덱스 번호 = 알파벳 순서
for i in S:
    result_list[ord(i) - ord('a')] += 1
for j in result_list:
    print(j, end=" ")

'''
result를 출력하는 두가지 방법
1) for j in result_list:
    print(j, end=" ")
2) print(*result_list)

*result_list의 의미?
컨테이너 타입의 데이터를 Unpacking!
예를 들어,
list = [1, 2, 3] 이면
*list = 1 2 3
'''

'''
백준 10809 [알파벳 찾기]
알파벳 소문자로만 이루어진 단어 S가 주어진다.
각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를,
포함되어 있지 않은 경우에는 -1을 출력하는 프로그램을 작성하시오.
[입력]
첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.
[출력]
각각의 알파벳에 대해서, a가 처음 등장하는 위치, b가 처음 등장하는 위치, ... z가 처음 등장하는 위치를 공백으로 구분해서 출력한다.
만약, 어떤 알파벳이 단어에 포함되어 있지 않다면 -1을 출력한다. 단어의 첫 번째 글자는 0번째 위치이고, 두 번째 글자는 1번째 위치이다.
'''

S = input()
# 알파벳 개수인 26개만큼 0으로 이루어진 list 만들기
result_list = [-1] * 26

# 차이 = 위에서 만든 알파벳 리스트의 인덱스 번호 = 스트링 인덱스 번호
for i in S:
    result_list[ord(i) - ord('a')] = S.index(i)
for j in result_list:
    print(j, end=" ")

